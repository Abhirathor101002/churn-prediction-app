# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iUBcx3WIBbmmVigow7tBq0OCsbCBF3NL
"""

from google.colab import files
files.upload()  # Choose kaggle.json

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d kryusufkaya/customer-churn-records
!unzip customer-churn-records.zip

import pandas as pd

# Load the dataset
df = pd.read_csv('Customer-Churn-Records.csv')

# Show the first 5 rows
df.head()

# Data summary
print(df.info())

# Basic stats
print(df.describe())

# Drop unnecessary columns and target
X = df.drop(['Exited', 'RowNumber', 'CustomerId', 'Surname'], axis=1)

# Target variable
y = df['Exited']

X = pd.get_dummies(X, drop_first=True)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split

# Identify categorical and numerical columns
categorical_cols = ['Geography', 'Gender', 'Card Type']
numerical_cols = [col for col in X.columns if col not in categorical_cols]

# Preprocessor
preprocessor = ColumnTransformer([
    ('cat', OneHotEncoder(drop='first'), categorical_cols)
], remainder='passthrough')  # Keep numerical columns as-is

# Pipeline
pipeline = Pipeline([
    ('preprocessing', preprocessor),
    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))
])

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(df.drop(['Exited', 'RowNumber', 'CustomerId', 'Surname'], axis=1),
                                                    df['Exited'], test_size=0.2, random_state=42)

# Fit pipeline
pipeline.fit(X_train, y_train)

# Evaluate
from sklearn.metrics import classification_report

y_pred = pipeline.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))

import joblib

# Save model
joblib.dump(pipeline, 'churn_model.pkl')

# Load model
loaded_model = joblib.load('churn_model.pkl')

# Predict on new data
sample = X_test.iloc[[0]]  # sample record
prediction = loaded_model.predict(sample)
print("Prediction:", prediction)

import streamlit as st
import pandas as pd
import joblib

# Load the model
model = joblib.load('churn_model.pkl')

st.title("ðŸ”® Customer Churn Predictor")

# Input fields
geography = st.selectbox("Geography", ["France", "Spain", "Germany"])
gender = st.selectbox("Gender", ["Male", "Female"])
age = st.slider("Age", 18, 100, 30)
credit_score = st.number_input("Credit Score", 300, 1000, 600)
tenure = st.slider("Tenure", 0, 10, 5)
balance = st.number_input("Balance", 0.0, 300000.0, 50000.0)
products = st.selectbox("Number of Products", [1, 2, 3, 4])
card = st.selectbox("Has Credit Card?", [0, 1])
active = st.selectbox("Is Active Member?", [0, 1])
salary = st.number_input("Estimated Salary", 0.0, 200000.0, 50000.0)
complain = st.selectbox("Complain", [0, 1])
satisfaction = st.slider("Satisfaction Score", 1, 5, 3)
card_type = st.selectbox("Card Type", ["Diamond", "Silver", "Gold", "Platinum"])
points = st.number_input("Point Earned", 0, 20000, 5000)

# Predict button
if st.button("Predict"):
    input_df = pd.DataFrame([{
        'CreditScore': credit_score,
        'Geography': geography,
        'Gender': gender,
        'Age': age,
        'Tenure': tenure,
        'Balance': balance,
        'NumOfProducts': products,
        'HasCrCard': card,
        'IsActiveMember': active,
        'EstimatedSalary': salary,
        'Complain': complain,
        'Satisfaction Score': satisfaction,
        'Card Type': card_type,
        'Point Earned': points
    }])

    prediction = model.predict(input_df)[0]
    st.success(f"ðŸš¨ Churn Prediction: {'YES' if prediction == 1 else 'NO'}")